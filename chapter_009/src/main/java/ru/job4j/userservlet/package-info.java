/**
 * 1. Реализация интерфейса [#2519] (доп к [#2512], [#2513], [#2515], [#51922], [#2516], [#2517], [#2518] )
 *
 * Попробовать изменить интерфейс. Сделать его более красивым за счет html и css.
 * Добавить проверку введенных данных на стороне клиента с помощью js.
 * Добавить два поля в модель пользователя Страна и город.
 * В форме создания и редактирования, динамически через ajax Заполнять список городов.
 * Если город изменили. То нужно перегрузить форму.
 * Добавить проверку введенных данных на стороне сервера.
 *
 *
 *
 *--------- Предыдущее задпние --------
 *
 * 1. Произвести автоматическое тестирование всех сервлетов. [#2518] (доп к [#2512], [#2513], [#2515], [#51922], [#2516], [#2517]  )
 *
 * Произвести автоматическое тестирование всех сервлетов.
 *
 *
 *
 *--------- Предыдущее задпние --------
 *
 * 1. Реализовать авторизация и аутентификацию [#2517] (доп к [#2512], [#2513], [#2515], [#51922], [#2516] )
 *
 * Добавить механизм авторизации и аутентификации на фильтрах.
 * Добавить новую модель роль.
 * Каждый пользователь в системе имеют свою роль.
 * Предусмотреть. Роль - администратор. Он может добавить и редактировать любого пользователя в том числе себя.
 * В форме редактирования роли должен появиться список всех ролей.
 * Обычный пользователь может редактировать только себя. Причем он не может менять роль.
 * Важный момент. для servlet api 3.0 > синхронизацию делать не надо. В задаче так же объяснить почему.
 *
 *
 *
 *--------- Предыдущее задпние --------
 *
 * 1. Реализовать MVC JSTL [#2516] (доп к [#2512], [#2513], [#2515], [#51922] )
 *
 * Скриплеты на JSP переделать в JSTL.
 * Изменить структуру работы. Сделать строгую схему MVC, когда точкой входа является сервлет.
 *
 *
 *
 *--------- Предыдущее задпние --------
 *
 * 2. Создание DBStore [#51922] (доп к [#2512], [#2513], [#2515] )
 *
 * Мы продолжаем дорабатывать наше приложение.
 * Теперь давайте добавить новое хранилище DBStore impl Store.
 * Он должен быть по аналогии синглетон.
 * Внутри нужно сделать хранение данных в базе данных.
 * Здесь нужно использовать коннект пул.
 * https://examples.javacodegeeks.com/core-java/apache/commons/dbcp/dbcp-connection-pooling-example/
 * Помните. здесь мы ничего не изменяем в нашем коде. только добавляем новый класс
 * и меняем ссылку
 * class ValidateServlet {
 * private final Store store = DBStore.getInstance();
 *
 *
 *--------- Предыдущее задпние --------
 *
 * 1. Перенести все виды из предыдущего задания на JSP [#2515] (доп к [#2512], [#2513])
 *
 * 1. Перенести отображение пользователей из сервлета на JSP. То есть за добавление данных должен отвечать сервлет, а за отображение JSP.
 *
 *
 *--------- Предыдущее задпние --------
 *
 * 1. Реализовать приложения для работы с пользователем. [#2513] (доп к [#2512])
 *
 * В этом задании нужно реализовать веб приложение для управления пользователями. Мы дорабатываем приложение из задания  1. Crud servlet, Web app architecture. [#2512]
 * В приложении должно быть три вида. Мы изменяем только слой представления - Presentation.
 *
 * Добавим три сервлета
 *
 * UsersServlet
 * - doGet URL  /list - открывает таблицу со всеми пользователями. В каждой строку должна быть колонка с кнопками (редактировать, удалить)
 *
 * UserCreateServlet
 * - doGet URL /create - Открывает форму для создания нового пользователя.
 * - doPost - / - сохраняет пользователя.
 *
 * UserUpdateServlet
 * - doGet URL /edit?id={userId} - открывает форму для редактирования с заполенными полями.
 * - doPost - / - сохраняет пользователя.
 *
 * Интерфейс - это html.
 * 1. Список пользователей - таблица.
 * 2. Создание - форма ввода
 * 3. Редактирование - заполненная форма ввода.
 *
 *
 *
 *
 *--------- Предыдущее задпние --------
 *
 * 1. Crud servlet, Web app architecture. [#2512]
 *
 * В это задании нужно создать веб приложение для работы с пользователем.
 * Модель данных.
 * Создать модель User c полями id, name, login, email, createDate. Это модель данных.
 *
 * ---Presentation layout.
 * Необходимо создать сервлет UserServlet и определить там методы doGet doPost. Это будет слой Presentation.
 * Метод doGet - должен отдавать список всех пользователей в системе.
 * Метод doPost - должен  уметь делать три вещи, создавать пользователя, обновлять поля пользователя, удалять пользователя.
 * Применить шаблон dispatch-pattern - https://github.com/peterarsentev/code_quality_principles#2-dispatch-pattern-instead-of-multiple-if-statements-and-switch-anti-pattern
 * Тестирование сервлета осуществлять через Test RESTFull service
 *
 * ---Logic Layout
 * Далее создайте класс ValidateService - это слой Logic. В нем нужно добавить методы
 * add, update, delete, findAll, findById
 * Каждый метод должен производить валидацию данных. Например, при обновлении полей нужно проверить. что такой пользователь существует.
 * Класс ValidateService сделать синглетоном. Использовать Eager initiazitation.
 *
 * ---Persistent Layout
 * Создать интерфейс Store c методами add, update, delete, findAll, findById
 * Сделать реализацию этого интерфейса MemoryStore. Сделать из него синлетон.
 *
 * Класс MemoryStore - должен быть потокобезопастный. вы можете использовать внутри потокбезопастные коллекции.
 * В web.xml указать для UserServiler режим load-on-startup
 * http://www.xyzws.com/servletfaq/what-is-%3Cloadonstartup%3E-in-webxml-file/24
 *
 *  Связывание слоев.
 *  Связывание слоев происходит за счет передачи ссылок на объект синглетона.
 *  Помните слой может взаимодействавать только с ниже стоящим слоем.
 *
 */
package ru.job4j.userservlet;
