Ключи
-XX:+UseSerialGC
-XX:+UseParallelGC
-XX:+UseG1GC (по умолчанию)

Без использования бенчмаков время работы программы сравнимо - существенной разницы поймать не удалось (Serial чуть быстрее, но в рамках погрешности).

При нехватки памяти (-Xmx8m) Serial и Parallel дают похожие результаты - удаляют из памяти большую часть объектов за исключением созданных в нескольких последних циклах.
G1 же при каждом запуске удаляет все объекты кроме последнего цикла.

При достаточном количестве памяти (-Xmx256m) G1 вообще не очищает память и как следствие (по идее) не должен тормозить работу программы.
Serial и Parallel же запускают очистку и удаляют сравнимое количестве объектов что и при нехватке памяти.

В плане вопроса какой коллектор подойдет для трекера зависит от его использования (в качестве приложения на клиенте или серверного) и машины на которой, он будет работать.

Сборщики Java HotSpot VM:
Serial GC - подходит для слабых машин с одним процессором. Его недостаток - долгие паузы при больших объемах данных.
Parallel GC -  подходит для большинства приложений. Плюсом является возможность автоматической подстройки под требуемые параметры.
CMS GC - деприкейтед с java9 в ползу G1
G1 GC - наиболее подходящий коллектор для современных машин. По умолчанию с java 9. Новая архитектура, меньше и более предсказуемы паузы, но большее потребление ресурсов.
Z GC - экспериментальный сборщик мусора с низкой задержкой. С java 11. Для серверов на Linux/x64. Высокое требование к железу. Для приложений с большой (многогигабайтной) кучей и требованием низкой задержки. Использует кучу одного поколения и выполняет большинство работы GC одновременно с приложением.
Используя механизм "барьера" при чтении, который перехватывает каждое чтение объекта из приложения и гарантирует правильность вернувшейся ссылки, что устраняет проблему одновременного перемещения объектов во время работы потоков приложений.
