/**
 * 3. Сканирование файловой системы. [#106929]
 * Файловая система представляет собой древовидную структуру. В модуле "Коллекции Про" рассматривался алгоритм обхода дерева.
 * Этот алгоритм обхода в ширину.
 * В этом задании нужно написать метод, который возвращает список всех файлов с конкретным расширением.
 * Метод должен заходить во всех каталоги.
 * Для этого нужно использовать алгоритм обхода дерева в ширину.
 * class Search {
 *    List<File> files(String parent, List<String> exts);
 * }
 * String parent - это путь до каталога, с которого нужно осуществлять поиск.
 * List<String> exts - это расширения файлов, которые мы ходим получить.
 * В этой задаче нужно использовать методы.
 * File file = new File(path);
 * file.listFiles() - возвращает список всех каталогов и файлов находящихся в папке  file.
 * file.isDirectory() - проверяет, что файл является директорией.
 * file.getName() - возвращает имя файла с расширением.
 * В этой задаче нужно написать тесты. Для тестов нужно создать временную структуру с файлами.
 * Структуру нужно создавать в папке System.getProperty("java.io.tmpdir")
 * Здесь нельзя использовать FileVisitor. Это задание на работу с деревом каталогов.
 *
 *--------- Предыдущее задпние --------
 *
 * 2. Удаление запрещенных слов [#859]
 * Реализовать сервис:
 * void dropAbuses(InputStream in, OutputStream out, String[] abuse)
 *
 * Задан входной символьный поток и выходной символьный поток. Надо удалить все слова, входящие в массив abuse.
 * Важно, все преобразования нужно делать в потоке.
 * Нельзя зачитать весь поток в память, удалить слова и потом записать.
 * Нужно все делать в потоке.
 *
 *--------- Предыдущее задпние --------
 *
 * 1. Проверить байтовый поток [#858]
 * Реализовать сервис:
 * boolean isNumber(InputStream in);
 * Метод должен проверить, что в байтовом потоке записано четное число.
 * Все потоки должны быть обернуты через try-with-resources, даже, если это ByteArrayInputStream.
 *
 */
 package ru.job4j.inout;